/* Gradient mixin, really nice. Source: https://github.com/mibgs/super-gradient */

@function contains($colors,$var) {
  $contains: false;
  @each $item in $colors { @if $item == $var { $contains: true; } }
  @return $contains;
}

@function orientationString($type, $from, $w3c:false) {
  $string: '';

  @if $w3c {

    @if $type == 'linear' {
      @if $from == 'top' or $from == 'bottom' { $string: 'to bottom, '; }
      @else if $from == 'left' or $from == 'right' { $string: 'to right, '; }
      @else if $from == (left top) or $from == (top left) or $from == (right bottom) or $from == (bottom right) { $string: '135deg, '; }
      @else { $string: '45deg, '; }

    } @else if $type == 'radial' { $string: 'ellipse at ' + $from + ', '; }

  } @else { // new webkit, moz, ms, o

    @if $type == 'linear' {
      @if $from == 'top' or $from == 'bottom' { $string: 'top, '; }
      @else if $from == 'left' or $from == 'right' { $string: 'left, '; }
      @else if $from == (left top) or $from == (top left) or $from == (right bottom) or $from == (bottom right) { $string: '-45deg, '; }
      @else { $string: '45deg, '; }

    } @else if $type == 'radial' { $string: $from + ', ellipse cover, '; }

  }

  @return $string;
}

@function colorSubstring($colors) {
  $i: 1;
  $substring: '';
  $string: '';

  @while $i < length($colors) {

    $substring: nth($colors, $i) + ' ' + nth($colors, $i+1);
    $string: $string + $substring;
    $i: $i + 1;

  }

  @return $string;
}

@function colorString($colors) {
  $i: 1;
  $spacer: ', ';
  $substring: '';
  $string: '';

  @while $i <= length($colors) {
    @if $i == length($colors) { $spacer: ''; }

    $substring: colorSubstring(nth($colors, $i)) + $spacer;
    $string: $string + $substring;
    $i: $i + 1;

  }

  @return $string;
}

@function ieGradientType($direction) {
  @if $firstColor { @return nth(nth($colors, 1), 1) }
  @else { @return nth(nth($colors, length($colors)), 1) }
}


@function ieColors($colors, $firstColor:true) {
  @if $firstColor { @return nth(nth($colors, 1), 1) }
  @else { @return nth(nth($colors, length($colors)), 1) }
}

@mixin sgradient($type:'linear', $from:'top', $colors:((rgba(42,179,221,1), 0%),(rgba(183,80,80,1), 100%))) {

  $orientationString: orientationString($type, $from);
  $orientationString_w3c: orientationString($type, $from, $w3c:true);

  $colorString: #{colorString($colors)};

  $cssString: gradient(#{$orientationString}#{$colorString});
  $cssString_w3c: gradient(#{$orientationString_w3c}#{$colorString});

  $ieGradientType: 0;
  @if $type != 'vertical' { $ieGradientType: 1 }

  background-color: #{ieColors($colors, false)};
  background: -webkit-#{$type}-#{$cssString};
  background:    -moz-#{$type}-#{$cssString};
  background:     -ms-#{$type}-#{$cssString};
  background:      -o-#{$type}-#{$cssString};
  background:         #{$type}-#{$cssString_w3c};
  filter: progid:DXImageTransform.Microsoft.gradient(GradientType=#{$ieGradientType}, StartColorStr='#{ieColors($colors)}', EndColorStr='#{ieColors($colors, false)}');
}