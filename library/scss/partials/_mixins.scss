/******************************************************************
Site Name: #{$site-name}
Author: #{$author}

Stylesheet: Mixins & Constants Stylesheet

This is where you can take advantage of Sass' great features:
Mixins & Constants. I won't go in-depth on how they work exactly,
there are a few articles below that will help do that. What I will
tell you is that this will help speed up simple changes like
changing a color or adding CSS3 techniques gradients.

A WORD OF WARNING: It's very easy to overdo it here. Be careful and
remember less is more.

******************************************************************/

/*********************
CLEARFIXIN'
*********************/

// Contain floats: nicolasgallagher.com/micro-clearfix-hack/
.clearfix {
  zoom: 1;
	&:before, &:after { content: ""; display: table; }
	&:after { clear: both; }
}

// A Meatier Clearfix: You won't need to put clearfix class everywhere.
// However, i've foudn taht this way of doing things gets messy. It's
// easier to know what you're adding to your HTML rather than
// clearfixing everything in the scss

@mixin clearfix {
  zoom: 1;
	&:before, &:after { content: ""; display: table; }
	&:after { clear: both; }
}






// Base measurement
$gutter: 7px;






// *********************
// Vertical Align any DIV
// Supported from as low as IE9, IE8 can do one.
// *********************
// http://zerosixthree.se/vertical-align-anything-with-just-3-lines-of-css/

// *********************

@mixin vertical-align {
	position: absolute;
	top: 50%;
	@include transform(translateY(-50%));
}

// Make things easily relative for verticalling
.relative{ position: relative; }

// Make vertical thigns easier
.vertical { 
	@include vertical-align;

	// Make things centered when vertical
	&.horizontal{
		width: 100%;
		text-align: center;
		margin: 0 auto;
	}
}






/* 	This mixin will help you nest mediaqueries easier.
	@Usage:
		@include wider-than(mobile) 	{ width: 55%; 	}
		@include wider-than(phablet) 	{ width: 65%; 	}
		@include wider-than(tablet) 	{ width: 75%;	}

	Uses the breakpoint map defined inside _breakpoints.scss
*/

// min-width mediaquery
@mixin wider-than($screen-size) {
	@if ($ie == false){
	    @if map-has-key($breakpoints, $screen-size) {
	        @media (min-width: map-get($breakpoints, $screen-size)) {
	            @content;
	        }
	    } @else {
	        // Debugging
	        @warn "'#{$screen-size}' has not been declared as a breakpoint."
	    }
    } @else {
	    @content;
	}
}

// max-width mediaquery
@mixin not-wider-than($screen-size) {
	@if ($ie == false){
	    @if map-has-key($breakpoints, $screen-size) {
	        @media (max-width: map-get($breakpoints, $screen-size)) {
	            @content;
	        }
	    } @else {
	        // Debugging
	        @warn "'#{$screen-size}' has not been declared as a breakpoint."
	    } 
	} @else {
		// We're not going to use things less than tablet or desktop for IE
		@if ($screen-size == mobile or $screen-size == phablet or $screen-size == tablet or $screen-size == desktop){
			/* No mobile styles for you mate. */
		} @else {
		    @content;
	    }
	}
}





// Padding in rems.
// padding-1, padding-4 etc is 1 rem or 4rem
/* this is the padding */

$paddings: 1, 2, 3, 4;
@each $padding in $paddings {
	
	$value: number(#{$padding});
	$px-padding: $value * 16px;
	
    .padding-#{$padding}{
		padding-top: $px-padding;
		padding-bottom: $px-padding;

		padding-top: #{$padding}rem;
		padding-bottom: #{$padding}rem;

		&-top {
			padding-top: $px-padding;
			padding-top: #{$padding}rem;
		}

		&-bottom{
			padding-bottom: $px-padding;
			padding-bottom: #{$padding}rem;
		}
    }
}

// What about the times when you need to remove margins from things

$margins: top, bottom, left, right;
@each $margin in $margins {
    .no-margin-#{$margin}{
		margin-#{$margin}: 0;
    }
}






/*********************
C O N T E N T   C H O R E O G R A P H Y
Something that will reorder your content if used correctly.
And on the right browser, of course.
**********************/

// This is a mixin for making the PARENT box ready.
// Usage:	@include boxed(vertical);
 
@mixin boxed ($dir) {
	display:box;
	display:-moz-box;
	display:-webkit-box;
	box-orient:$dir;
	-moz-box-orient:$dir;
	-webkit-box-orient:$dir;
}

// This is the lever ordering part.
// Usage:	@include order(1);

@mixin order ($num) {
	box-ordinal-group: 1;
	-moz-box-ordinal-group: 1;
	-webkit-box-ordinal-group: 1;
	box-ordinal-group: #{$num};
	-moz-box-ordinal-group: #{$num};
	-webkit-box-ordinal-group: #{$num};
}







/*********************
Placeholder Mixin
Simply use this in a class somewhere to add placeholder styles.
	@include placeholder {
		colour: $brand-colour;
	}
*********************/

@mixin placeholder {

	&:placeholder{
		@content;
	}

    &::-webkit-input-placeholder {
        @content;
    }

    &:-moz-placeholder { /* Firefox 18- */
        @content;
    }

    &::-moz-placeholder {  /* Firefox 19+ */
        @content;
    }

    &:-ms-input-placeholder {
        @content;
    }
}







/* Font Smoothing - http://maximilianhoffmann.com/posts/better-font-rendering-on-osx */

@mixin font-smoothing($value: on) {
    @if $value == on {
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }
    @else {
        -webkit-font-smoothing: subpixel-antialiased;
        -moz-osx-font-smoothing: auto;
    }
}






/*********************
TOOLS
*********************/

// BORDER-BOX ALL THE THINGS! (http://paulirish.com/2012/box-sizing-border-box-ftw/)
* {
	-webkit-box-sizing: border-box;
	-moz-box-sizing:    border-box;
	box-sizing:         border-box;
}

// http://www.zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement/
.image-replacement {
	text-indent: 100%;
	white-space: nowrap;
	overflow: hidden;
}


// Screen Reader Hiding of Text
@mixin visuallyhidden() {
	margin: -1px;
	padding: 0;
	width: 1px;
	height: 1px;
	overflow: hidden;
	clip: rect(0 0 0 0);
	clip: rect(0, 0, 0, 0);
	position: absolute;
}



/************************
 I N L I N E - B L O C K
~ Gap Removal Technique ~

@usage: @include ib();
************************/

@mixin ib( ){
	// Remove that gap
    letter-spacing: -0.31em; /* webkit */
    letter-spacing: -0.31rem; /* webkit */
    *letter-spacing: normal; /* reset IE < 8 */
    word-spacing: -0.43em; /* IE < 8 && gecko */
    word-spacing: -0.43rem; /* IE < 8 && gecko */

	> * {
	// Apply normals to all direct child elements
	    display: inline-block;
	    zoom: 1; *display: inline; /* IE < 8: fake inline-block */
	    letter-spacing: normal;
	    word-spacing: normal;
	    vertical-align: top;
	}	
}








// Modular Scale and all that jazz. SHOULD WORK! But might not... depends on the size really, doesn't it.
// @Useage:	@include modular(rem(44));

// Scaling Variables
$golden:           1.618;
$minor-second:     1.067;
$major-second:     1.125;
$minor-third:      1.2;
$major-third:      1.25;
$perfect-fourth:   1.333;
$augmented-fourth: 1.414;
$perfect-fifth:    1.5;
$minor-sixth:      1.6;
$major-sixth:      1.667;
$minor-seventh:    1.778;
$major-seventh:    1.875;
$octave:           2;
$major-tenth:      2.5;
$major-eleventh:   2.667;
$major-twelfth:    3;
$double-octave:    4;

/* This is quite an experiment with font sizes. 
 Basically, i'm using a modualr scale for the type. */

@mixin modular($largest, $rem: false){
	$ratio: $minor-second;
									@include font-size(modular-scale(-4, $largest, $ratio), $rem);
//	@media(min-width: $mobile){ 	@include font-size(modular-scale(-5, $largest, $ratio), $rem); }
	@media(min-width: $phablet){ 	@include font-size(modular-scale(-4, $largest, $ratio), $rem); }
	@media(min-width: $tablet){ 	@include font-size(modular-scale(-3, $largest, $ratio), $rem); }
	@media(min-width: $desklet){ 	@include font-size(modular-scale(-2, $largest, $ratio), $rem); }
	@media(min-width: $desktop){ 	@include font-size(modular-scale(-1, $largest, $ratio), $rem); }
	@media(min-width: $cinema){ 	@include font-size($largest, $rem); }
}







/*********************
TRANSITION
*********************/

/*
I totally rewrote this to be cleaner and easier to use.
You'll need to be using Sass 3.2+ for these to work.
Thanks to @anthonyshort for the inspiration on these.
USAGE: @include transition(all 0.2s ease-in-out);
*/

@mixin transition($transition...) {
	// defining prefixes so we can use them in mixins below
	$prefixes:      ("-webkit",  "");
  @each $prefix in $prefixes {
    #{$prefix}-transition: $transition;
  }

  transition: $transition;
}







/*********************
CSS3 GRADIENTS
Be careful with these since they can
really slow down your CSS. Don't overdo it.
*********************/

/* @include css-gradient(#dfdfdf,#f8f8f8); */
@mixin css-gradient($from: #dfdfdf, $to: #f8f8f8) {
	background-color: $to;
	background-image: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
	background-image: -webkit-linear-gradient(top, $from, $to);
	background-image: -moz-linear-gradient(top, $from, $to);
	background-image: -o-linear-gradient(top, $from, $to);
	background-image: linear-gradient(to bottom, $from, $to);
}







/*********************
BOX SIZING
*********************/

/* @include box-sizing(border-box); */
/* NOTE: value of "padding-box" is only supported in Gecko. So
probably best not to use it. I mean, were you going to anyway? */
@mixin box-sizing($type: border-box) {
	-webkit-box-sizing: $type;
	-moz-box-sizing:    $type;
	-ms-box-sizing:     $type;
	box-sizing:         $type;
}






/*********************
Background colour based on brightness
*********************/

@mixin bg($color) {
	// do some clever maths to determine if we
	// should go brighter or darker
	$brightness: lightness($color);
	background-color: $color;

	@if ($brightness > 50%) {
		&:hover, &:focus {
			background-color: darken($color, 10%);
		}
	} @else {
		&:hover, &:focus {
			background-color: lighten($color, 10%);
		}
	}
}